log "[mouse] mouse test initialized"

;InitInteger r0
;InitInteger r1
;InitInteger r2
;InitInteger r3
;InitInteger r4
;InitInteger r5
;InitInteger r6
;InitInteger r7
;InitInteger r8
;InitInteger r9

log "[mouse] loading r0:"
log r0

GetOwnInformation r1, r2, r3, r4
log "[mouse] current position:"
log r1
log r2

cmp r0, #8191
JMPG0 setdiff

sub r0, #8191, r7
cmp r7, #1
JMPEQ0 one

cmp r7, #2
JMPEQ0 two

cmp r7, #3
JMPEQ0 three

cmp r7, #4
JMPEQ0 four

cmp r7, #6
JMPEQ0 six

cmp r7, #7
JMPEQ0 seven

cmp r7, #8
JMPEQ0 eight

cmp r7, #9
JMPEQ0 nine

log "[mouse] r0 is broken"
log r0
DoNothing

:one
log "[mouse] case one"
add r2, #-1, r1
add r2, #-1, r2
log "[mouse] moving to:"
log r1
log r2
MoveTo r1, r2

:two
log "[mouse] case two"
add r1, #-1, r1
log "[mouse] moving to:"
log r1
log r2
MoveTo r1, r2

:three
log "[mouse] case three"
add r1, #-1, r1
add r2, #1, r2
log "[mouse] moving to:"
log r1
log r2
MoveTo r1, r2

:four
log "[mouse] case four"
add r2, #-1, r2
log "[mouse] moving to:"
log r1
log r2
MoveTo r1, r2

:six
log "[mouse] case six"
add r2, #1, r2
log "[mouse] moving to:"
log r1
log r2
MoveTo r1, r2

:seven
log "[mouse] case seven"
add r1, #1, r1
add r2, #-1, r2
log "[mouse] moving to:"
log r1
log r2
MoveTo r1, r2

:eight
log "[mouse] case eight"
add r1, #1, r1
log "[mouse] moving to:"
log r1
log r2
MoveTo r1, r2

:nine
log "[mouse] case nine"
add r1, #1, r1
add r2, #1, r2
log "[mouse] moving to:"
log r1
log r2
MoveTo r1, r2

:setdiff

;add #0, #-1, r5
InitInteger r5, #-1
:loop1

;add #0, #-1, r6
InitInteger r6, #-1
:loop2

add r1, r5, r8
add r2, r6, r9

getTileEntity r8, r9, r7
log "[mouse] got entity:"
log r7

isEmpty r7
JMPEQ0 continue

cmp r7, #0
JMPNEQ0 continue

getTileEntityID r8, r9, r7
log "[mouse] got entityID:"
log r7
cmp r7, "changeme"; change the "changeme"
JMPEQ0 continue

isEmpty r0
JMPEQ0 setr0

mod r0, #64, r4
div r0, #64, r3

sub r3, r8, r3
sub r4, r9, r4

mov r5, r3
mul r5, #3, r5
add r5, r4, r5
add r5, #5, r5

mov r0, r5
log "[mouse] saving r0:"
log r0

add r3, r1, r3
add r4, r2, r4

log "[mouse] moving to:"
log r3
log r4

MoveTo r3, r4

:setr0
add r8, #0, r0
shl r0, #6, r0
add r0, r9, r0

:continue
add r6, #1, r6

cmp r6, #2
JMPNEQ0 continue2
add r5, #1, r5

cmp r5, #2
JMPEQ0 finish; should never jump here

JMP loop1

:continue2
JMP loop2

:finish